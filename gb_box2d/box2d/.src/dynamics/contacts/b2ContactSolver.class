' Gambas class file

' * Copyright (c) 2006-2007 Erin Catto http:
' *
' * This software is provided 'as-is', without any express or implied
' * warranty.  In no event will the authors be held liable for any damages
' * arising from the use of this software.
' * Permission is granted to anyone to use this software for any purpose
' * including commercial applications, and to alter it and redistribute it
' * freely, subject to the following restrictions:
' * 1. The origin of this software must not be misrepresented
' you must not
' * claim that you wrote the original software. If you use this software
' * in a product, an ackn owledgment in the product documentation would be
' * appreciated but is not required.
' * 2. Altered source versions must be plainly marked, and must not be
' * misrepresented the original software.
' * 3. This notice may not be removed or altered from any source distribution.
' */

Public m_allocator As Variant = Null,
  Public m_constraints As New Variant[]
Public m_constraintCount As Integer 0

Public Sub _new(contacts As Variant, contactCount As Variant, allocator As Variant)
  
  Dim i, j, k As Variant = 0
  
  Dim tVec As Variant
  Dim tMat As Variant
  Dim count As Variant = 0
  
  Dim contact As Variant 
  
  Dim b1 As Variant 
  
  Dim b2 As Variant 
  
  Dim manifoldCount As Variant 
  
  Dim manifolds As Variant 
  
  Dim friction As Variant 
  
  Dim restitution As Variant 
  
  ' // var v1 = b1.m_linearVelocity.Copy()
  Dim v1X As Variant 
  
  Dim v1Y As Variant 
  
  ' // var v2 = b2.m_linearVelocity.Copy()
  Dim v2X As Variant 
  
  Dim v2Y As Variant 
  
  Dim w1 As Variant 
  
  Dim w2 As Variant 
  
  Dim manifold As Variant 
  Dim normalX As Variant
  Dim c As Variant 
  Dim normalY As Variant 
  
  Dim cp As Variant 
  Dim ccp As Varian
  Dim r1X As Variant 
  Dim r1Y As Variant
  Dim r2X As Variant
  Dim r2Y As Variant
  
  Dim r1Sqr As Variant
  Dim r2Sqr As Variant
  Dim rn1 As Variant
  Dim rn2 As Variant 
  Dim kNormal As Variant
  Dim tangentX As Variant 
  Dim rt1 As Variant 
  Dim rt2 As Variant 
  Dim kTangent As Variant
  
  Dim tX As Variant
  Dim tY As Variant 
  Dim vRel As Variant
  
  ' //  initialize instance variables for references
  Me.m_constraints = New Variant[] 		' // 
  Me.m_allocator = allocator
  
  Me.m_constraintCount = 0
  For i = 0 To contactCount
    Me.m_constraintCount += contacts[i].GetManifoldCount()
  Next
  
  ' //  fill array
  For i = 0 To Me.m_constraintCount
    Me.m_constraints[i] = New B2ContactConstraint()
  Next
  
  For i = 0 To contactCount
    contact = contacts[i]
    
    b1 = contact.m_shape1.m_body
    
    b2 = contact.m_shape2.m_body
    
    manifoldCount = contact.GetManifoldCount()
    
    manifolds = contact.GetManifolds()
    
    friction = contact.m_friction
    
    restitution = contact.m_restitution
    
    ' // var v1 = b1.m_linearVelocity.Copy()
    v1X = b1.m_linearVelocity.x
    
    v1Y = b1.m_linearVelocity.y
    
    ' // var v2 = b2.m_linearVelocity.Copy()
    v2X = b2.m_linearVelocity.x
    
    v2Y = b2.m_linearVelocity.y
    
    w1 = b1.m_angularVelocity
    
    w2 = b2.m_angularVelocity
    
    For j = 0 To manifoldCount
      
      manifold = manifolds[j]
      
      ' // b2Settings.b2Assert(manifold.pointCount > 0)
      ' // var normal = manifold.normal.Copy()
      normalX = manifold.normal.x
      
      normalY = manifold.normal.y
      
      ' // b2Settings.b2Assert(count < me.m_constraintCount)
      c = Me.m_constraints[count]
      
      c.body1 = b1
      c.body2 = b2
      c.manifold = manifold
      ' // c.normal = normal
      c.normal.x = normalX
      c.normal.y = normalY
      c.pointCount = manifold.pointCount
      c.friction = friction
      c.restitution = restitution
      For k = 0 To c.pointCount
        
        cp = manifold.points[k]
        
        ccp = c.points[k]
        
        ccp.normalImpulse = cp.normalImpulse
        ccp.tangentImpulse = cp.tangentImpulse
        ccp.separation = cp.separation
        ' // var r1 = b2Math.SubtractVV( cp.position, b1.m_position )
        r1X = cp.position.x - b1.m_position.x
        
        r1Y = cp.position.y - b1.m_position.y
        
        ' // var r2 = b2Math.SubtractVV( cp.position, b2.m_position )
        r2X = cp.position.x - b2.m_position.x
        
        r2Y = cp.position.y - b2.m_position.y
        
        ' // ccp.localAnchor1 = b2Math.b2MulTMV(b1.m_R, r1)
        tVec = ccp.localAnchor1
        tMat = b1.m_R
        tVec.x = r1X * tMat.col1.x + r1Y * tMat.col1.y
        tVec.y = r1X * tMat.col2.x + r1Y * tMat.col2.y
        ' // ccp.localAnchor2 = b2Math.b2MulTMV(b2.m_R, r2)
        tVec = ccp.localAnchor2
        tMat = b2.m_R
        tVec.x = r2X * tMat.col1.x + r2Y * tMat.col1.y
        tVec.y = r2X * tMat.col2.x + r2Y * tMat.col2.y
        r1Sqr = r1X * r1X + r1Y * r1Y
        
        r2Sqr = r2X * r2X + r2Y * r2Y
        
        ' // var rn1 = b2Math.b2Dot(r1, normal)
        rn1 = r1X * normalX + r1Y * normalY
        
        ' // var rn2 = b2Math.b2Dot(r2, normal)
        rn2 = r2X * normalX + r2Y * normalY
        
        kNormal = b1.m_invMass + b2.m_invMass
        
        kNormal += b1.m_invI * (r1Sqr - rn1 * rn1) + b2.m_invI * (r2Sqr - rn2 * rn2)
        ' // b2Settings.b2Assert(kNormal > Number.MIN_VALUE)
        ccp.normalMass = 1.0 / kNormal
        ' // var tangent = b2Math.b2CrossVF(normal, 1.0)
        tangentX = normalY
        tangentY = - normalX
        
        ' // var rt1 = b2Math.b2Dot(r1, tangent)
        rt1 = r1X * tangentX + r1Y * tangentY
        
        ' // var rt2 = b2Math.b2Dot(r2, tangent)
        rt2 = r2X * tangentX + r2Y * tangentY
        
        kTangent = b1.m_invMass + b2.m_invMass
        
        kTangent += b1.m_invI * (r1Sqr - rt1 * rt1) + b2.m_invI * (r2Sqr - rt2 * rt2)
        ' // b2Settings.b2Assert(kTangent > Number.MIN_VALUE)
        ccp.tangentMass = 1.0 / kTangent
        ' //  Setup a velocity bias for restitution.
        ccp.velocityBias = 0.0
        If (ccp.separation > 0.0) Then 
          ccp.velocityBias = -60.0 * ccp.separation
        Endif
        ' // var vRel = b2Math.b2Dot(c.normal, b2Math.SubtractVV( b2Math.SubtractVV( b2Math.AddVV( v2, b2Math.b2CrossFV(w2, r2)), v1 ), b2Math.b2CrossFV(w1, r1)))
        tX = v2X + (- w2 * r2Y) - v1X - (- w1 * r1Y)
        
        tY = v2Y + (w2 * r2X) - v1Y - (w1 * r1X)
        
        ' // var vRel = b2Dot(c.normal, tX/Y)
        vRel = c.normal.x * tX + c.normal.y * tY
        
        If (vRel < - b2Settings.b2_velocityThreshold) Then 
          ccp.velocityBias += - c.restitution * vRel
        Endif
      Next 'k
      count += 1
    Next 'j	
  Next 'i
  ' // b2Settings.b2Assert(count == me.m_constraintCount)			
  
End

' // ~b2ContactSolver()

Public Sub PreSolve()
  
  Dim i As Integer
  Dim tVec As Variant
  Dim tVec2 As Variant
  Dim tMat As Variant
  ' //  Warm start.
  
  Dim c As Variant
  Dim b1 As Variant
  Dim b2 As Variant
  Dim invMass1 As Variant 
  Dim invI1 As Variant
  Dim invMass2 As Variant 
  Dim invI2 As Variant
  Dim normalX As Variant
  Dim normalY As Variant
  Dim tangentX As Variant
  Dim tangentY As Variant
  Dim j As Variant
  Dim tCount As Variant
  Dim ccp As Variant
  Dim PX As Variant 
  Dim PY As Variant
  Dim r1X As Variant 
  Dim r1Y As Variant
  
  Dim r2X As Variant
  Dim r2Y As Variant 
  Dim ccp2 As Variant
  
  For i = 0 To Me.m_constraintCount
    c = Me.m_constraints[i]
    
    b1 = c.body1
    
    b2 = c.body2
    
    invMass1 = b1.m_invMass
    
    invI1 = b1.m_invI
    
    invMass2 = b2.m_invMass
    
    invI2 = b2.m_invI
    
    ' // var normal = new b2Vec2(c.normal.x, c.normal.y)
    normalX = c.normal.x
    
    normalY = c.normal.y
    
    ' // var tangent = b2Math.b2CrossVF(normal, 1.0)
    tangentX = normalY
    
    tangentY = - normalX
    
    j = 0
    
    tCount = 0
    
    If (b2World.s_enableWarmStarting) Then 
      
      tCount = c.pointCount
      For j = 0 To tCount 
        ccp = c.points[j]
        
        ' // var P = b2Math.AddVV( b2Math.MulFV(ccp.normalImpulse, normal), b2Math.MulFV(ccp.tangentImpulse, tangent))
        PX = ccp.normalImpulse * normalX + ccp.tangentImpulse * tangentX
        
        PY = ccp.normalImpulse * normalY + ccp.tangentImpulse * tangentY
        
        ' // var r1 = b2Math.b2MulMV(b1.m_R, ccp.localAnchor1)
        tMat = b1.m_R
        tVec = ccp.localAnchor1
        r1X = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y
        
        r1Y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y
        
        ' // var r2 = b2Math.b2MulMV(b2.m_R, ccp.localAnchor2)
        tMat = b2.m_R
        tVec = ccp.localAnchor2
        r2X = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y
        
        r2Y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y
        
        ' // b1.m_angularVelocity -= invI1 * b2Math.b2CrossVV(r1, P)
        b1.m_angularVelocity -= invI1 * (r1X * PY - r1Y * PX)
        ' // b1.m_linearVelocity.Subtract( b2Math.MulFV(invMass1, P) )
        b1.m_linearVelocity.x -= invMass1 * PX
        b1.m_linearVelocity.y -= invMass1 * PY
        ' // b2.m_angularVelocity += invI2 * b2Math.b2CrossVV(r2, P)
        b2.m_angularVelocity += invI2 * (r2X * PY - r2Y * PX)
        ' // b2.m_linearVelocity.Add( b2Math.MulFV(invMass2, P) )
        b2.m_linearVelocity.x += invMass2 * PX
        b2.m_linearVelocity.y += invMass2 * PY
        ccp.positionImpulse = 0.0
        
      Next 'j
      
    Else
      tCount = c.pointCount
      For j = 0 To tCount
        ccp2 = c.points[j]
        ccp2.normalImpulse = 0.0
        ccp2.tangentImpulse = 0.0
        ccp2.positionImpulse = 0.0
      Next 'j
    Endif
  Next 'i
  
End

Public Sub SolveVelocityConstraints()
  
  Dim j As Variant = 0
  
  Dim ccp As Variant
  Dim r1X As Variant
  Dim r1Y As Variant
  Dim r2X As Variant
  Dim r2Y As Variant
  Dim dvX As Variant
  Dim dvY As Variant
  Dim lambda As Variant
  Dim newImpulse As Variant
  Dim PX As Variant
  Dim PY As Variant
  Dim tMat As Variant
  Dim tVec As Variant
  Dim i As Integer
  
  Dim c As Variant
  
  Dim b1 As Variant
  
  Dim b2 As Variant
  
  Dim b1_angularVelocity As Variant
  
  Dim b1_linearVelocity As Variant
  
  Dim b2_angularVelocity As Variant
  
  Dim b2_linearVelocity As Variant
  
  Dim invMass1 As Variant
  
  Dim invI1 As Variant
  
  Dim invMass2 As Variant
  
  Dim invI2 As Variant
  
  ' // var normal
  Dim normalX As Variant
  
  Dim normalY As Variant
  
  ' // var tangent
  Dim tangentX As Variant
  
  Dim tangentY As Variant
  
  ' //  Solver normal constraints
  Dim tCount As Variant
  
  Dim vn As Variant 
  Dim vt As Variant 
  Dim maxFriction As Variant 
  Dim vt As Variant
  
  For i = 0 To Me.m_constraintCount
    c = Me.m_constraints[i]
    
    b1 = c.body1
    
    b2 = c.body2
    
    b1_angularVelocity = b1.m_angularVelocity
    
    b1_linearVelocity = b1.m_linearVelocity
    
    b2_angularVelocity = b2.m_angularVelocity
    
    b2_linearVelocity = b2.m_linearVelocity
    
    invMass1 = b1.m_invMass
    
    invI1 = b1.m_invI
    
    invMass2 = b2.m_invMass
    
    invI2 = b2.m_invI
    
    ' // var normal = new b2Vec2(c.normal.x, c.normal.y)
    normalX = c.normal.x
    
    normalY = c.normal.y
    
    ' // var tangent = b2Math.b2CrossVF(normal, 1.0)
    tangentX = normalY
    
    tangentY = - normalX
    
    ' //  Solver normal constraints
    tCount = c.pointCount
    
    For j = 0 To tCount
      
      ccp = c.points[j]
      ' // r1 = b2Math.b2MulMV(b1.m_R, ccp.localAnchor1)
      tMat = b1.m_R
      tVec = ccp.localAnchor1
      r1X = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y
      r1Y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y
      ' // r2 = b2Math.b2MulMV(b2.m_R, ccp.localAnchor2)
      tMat = b2.m_R
      tVec = ccp.localAnchor2
      r2X = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y
      r2Y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y
      ' //  Relative velocity at contact
      ' // var dv = b2Math.SubtractVV( b2Math.AddVV( b2.m_linearVelocity, b2Math.b2CrossFV(b2.m_angularVelocity, r2)), b2Math.SubtractVV(b1.m_linearVelocity, b2Math.b2CrossFV(b1.m_angularVelocity, r1)))
      ' // dv = b2Math.SubtractVV(b2Math.SubtractVV( b2Math.AddVV( b2.m_linearVelocity, b2Math.b2CrossFV(b2.m_angularVelocity, r2)), b1.m_linearVelocity), b2Math.b2CrossFV(b1.m_angularVelocity, r1))
      dvX = b2_linearVelocity.x + (- b2_angularVelocity * r2Y) - b1_linearVelocity.x - (- b1_angularVelocity * r1Y)
      dvY = b2_linearVelocity.y + (b2_angularVelocity * r2X) - b1_linearVelocity.y - (b1_angularVelocity * r1X)
      ' //  Compute normal impulse
      ' // var vn = b2Math.b2Dot(dv, normal)
      vn As Variant = dvX * normalX + dvY * normalY
      
      lambda = - ccp.normalMass * (vn - ccp.velocityBias)
      ' //  b2Clamp the accumulated impulse
      newImpulse = b2Math.b2Max(ccp.normalImpulse + lambda, 0.0)
      lambda = newImpulse - ccp.normalImpulse
      ' //  Apply contact impulse
      ' // P = b2Math.MulFV(lambda, normal)
      PX = lambda * normalX
      PY = lambda * normalY
      ' // b1.m_linearVelocity.Subtract( b2Math.MulFV( invMass1, P ) )
      b1_linearVelocity.x -= invMass1 * PX
      b1_linearVelocity.y -= invMass1 * PY
      b1_angularVelocity -= invI1 * (r1X * PY - r1Y * PX)
      ' // b2.m_linearVelocity.Add( b2Math.MulFV( invMass2, P ) )
      b2_linearVelocity.x += invMass2 * PX
      b2_linearVelocity.y += invMass2 * PY
      b2_angularVelocity += invI2 * (r2X * PY - r2Y * PX)
      ccp.normalImpulse = newImpulse
      ' //  MOVED FROM BELOW
      ' //  Relative velocity at contact
      ' // var dv = b2.m_linearVelocity + b2Cross(b2.m_angularVelocity, r2) - b1.m_linearVelocity - b2Cross(b1.m_angularVelocity, r1)
      ' // dv =  b2Math.SubtractVV(b2Math.SubtractVV(b2Math.AddVV(b2.m_linearVelocity, b2Math.b2CrossFV(b2.m_angularVelocity, r2)), b1.m_linearVelocity), b2Math.b2CrossFV(b1.m_angularVelocity, r1))
      dvX = b2_linearVelocity.x + (- b2_angularVelocity * r2Y) - b1_linearVelocity.x - (- b1_angularVelocity * r1Y)
      dvY = b2_linearVelocity.y + (b2_angularVelocity * r2X) - b1_linearVelocity.y - (b1_angularVelocity * r1X)
      ' //  Compute tangent impulse
      vt As Variant = dvX * tangentX + dvY * tangentY
      
      lambda = ccp.tangentMass * (- vt)
      ' //  b2Clamp the accumulated impulse
      maxFriction As Variant = c.friction * ccp.normalImpulse
      
      newImpulse = b2Math.b2Clamp(ccp.tangentImpulse + lambda, - maxFriction, maxFriction)
      lambda = newImpulse - ccp.tangentImpulse
      ' //  Apply contact impulse
      ' // P = b2Math.MulFV(lambda, tangent)
      PX = lambda * tangentX
      PY = lambda * tangentY
      ' // b1.m_linearVelocity.Subtract( b2Math.MulFV( invMass1, P ) )
      b1_linearVelocity.x -= invMass1 * PX
      b1_linearVelocity.y -= invMass1 * PY
      b1_angularVelocity -= invI1 * (r1X * PY - r1Y * PX)
      ' // b2.m_linearVelocity.Add( b2Math.MulFV( invMass2, P ) )
      b2_linearVelocity.x += invMass2 * PX
      b2_linearVelocity.y += invMass2 * PY
      b2_angularVelocity += invI2 * (r2X * PY - r2Y * PX)
      ccp.tangentImpulse = newImpulse
    Next 'j
    
    b1.m_angularVelocity = b1_angularVelocity
    b2.m_angularVelocity = b2_angularVelocity
  Next 'i
  
End

Public Sub SolvePositionConstraints(beta As Variant) As Variant ''funcion
  
  Dim minSeparation As Variant = 0.0
  
  Dim tMat As Variant
  Dim tVec As Variant
  
  Dim i As Integer
  
  'for i
  Dim c As Variant 
  
  Dim b1 As Variant 
  
  Dim b2 As Variant 
  
  Dim b1_position As Variant 
  
  Dim b1_rotation As Variant 
  
  Dim b2_position As Variant 
  
  Dim b2_rotation As Variant 
  
  Dim invMass1 As Variant 
  
  Dim invI1 As Variant 
  
  Dim invMass2 As Variant 
  
  Dim invI2 As Variant 
  
  ' // var normal 
  Dim normalX As Variant 
  
  Dim normalY As Variant 
  
  ' // var tangent 
  Dim tangentX As Variant 
  
  Dim tangentY As Variant 
  
  ' //  Solver normal constraints
  Dim tCount As Variant 
  
  'for j
  Dim ccp As Variant 
  Dim r1X As Variant 
  Dim r1Y As Variant 
  Dim r2X As Variant 
  Dim r2Y As Variant 
  ' // var p1 
  Dim p1X As Variant 
  
  Dim p1Y As Variant 
  
  ' // var p2 
  Dim p2X As Variant 
  
  Dim p2Y As Variant 
  
  ' // var dp 
  Dim dpX As Variant 
  
  Dim dpY As Variant 
  
  ' //  Approximate the current separation.
  ' // var separation 
  Dim separation As Variant 
  
  ' //  Prevent large corrections and allow slop.
  Dim C As Variant 
  
  ' //  Compute normal impulse
  Dim dImpulse As Variant 
  
  ' //  b2Clamp the accumulated impulse
  Dim impulse0 As Variant 
  
  ' // var impulse 
  Dim impulseX As Variant 
  
  Dim impulseY As Variant 
  
  For i = 0 To Me.m_constraintCount
    c = Me.m_constraints[i]
    
    b1 = c.body1
    
    b2 = c.body2
    
    b1_position = b1.m_position
    
    b1_rotation = b1.m_rotation
    
    b2_position = b2.m_position
    
    b2_rotation = b2.m_rotation
    
    invMass1 = b1.m_invMass
    
    invI1 = b1.m_invI
    
    invMass2 = b2.m_invMass
    
    invI2 = b2.m_invI
    
    ' // var normal = new b2Vec2(c.normal.x, c.normal.y)
    normalX = c.normal.x
    
    normalY = c.normal.y
    
    ' // var tangent = b2Math.b2CrossVF(normal, 1.0)
    tangentX = normalY
    
    tangentY = - normalX
    
    ' //  Solver normal constraints
    tCount = c.pointCount
    
    For j = 0 To tCount
      
      ccp = c.points[j]
      
      ' // r1 = b2Math.b2MulMV(b1.m_R, ccp.localAnchor1)
      tMat = b1.m_R
      tVec = ccp.localAnchor1
      r1X = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y
      r1Y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y
      ' // r2 = b2Math.b2MulMV(b2.m_R, ccp.localAnchor2)
      tMat = b2.m_R
      tVec = ccp.localAnchor2
      r2X = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y
      r2Y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y
      ' // var p1 = b2Math.AddVV(b1.m_position, r1)
      p1X = b1_position.x + r1X
      
      p1Y = b1_position.y + r1Y
      
      ' // var p2 = b2Math.AddVV(b2.m_position, r2)
      p2X = b2_position.x + r2X
      
      p2Y = b2_position.y + r2Y
      
      ' // var dp = b2Math.SubtractVV(p2, p1)
      dpX = p2X - p1X
      
      dpY = p2Y - p1Y
      
      ' //  Approximate the current separation.
      ' // var separation = b2Math.b2Dot(dp, normal) + ccp.separation
      separation = (dpX * normalX + dpY * normalY) + ccp.separation
      
      ' //  Track max constraint error.
      minSeparation = b2Math.b2Min(minSeparation, separation)
      ' //  Prevent large corrections and allow slop.
      C = beta * b2Math.b2Clamp(separation + b2Settings.b2_linearSlop, - b2Settings.b2_maxLinearCorrection, 0.0)
      
      ' //  Compute normal impulse
      dImpulse = - ccp.normalMass * C
      
      ' //  b2Clamp the accumulated impulse
      impulse0 = ccp.positionImpulse
      
      ccp.positionImpulse = b2Math.b2Max(impulse0 + dImpulse, 0.0)
      dImpulse = ccp.positionImpulse - impulse0
      ' // var impulse = b2Math.MulFV( dImpulse, normal )
      impulseX = dImpulse * normalX
      
      impulseY = dImpulse * normalY
      
      ' // b1.m_position.Subtract( b2Math.MulFV( invMass1, impulse ) )
      b1_position.x -= invMass1 * impulseX
      b1_position.y -= invMass1 * impulseY
      b1_rotation -= invI1 * (r1X * impulseY - r1Y * impulseX)
      b1.m_R.Set(b1_rotation)
      ' // b2.m_position.Add( b2Math.MulFV( invMass2, impulse ) )
      b2_position.x += invMass2 * impulseX
      b2_position.y += invMass2 * impulseY
      b2_rotation += invI2 * (r2X * impulseY - r2Y * impulseX)
      b2.m_R.Set(b2_rotation)
    Next 'j
    ' //  Update body rotations
    b1.m_rotation = b1_rotation
    b2.m_rotation = b2_rotation
  Next 'i
  Return minSeparation >= - b2Settings.b2_linearSlop
  
End

Public Sub PostSolve()
  
  Dim i, j As Integer
  Dim c As Variant
  
  Dim m As Variant 
  
  Dim mPoint As Variant
  Dim cPoint As Variant
  
  For i = 0 To Me.m_constraintCount
    c = Me.m_constraints[i]
    
    m = c.manifold
    
    For j = 0 To c.pointCount
      mPoint = m.points[j]
      cPoint = c.points[j]
      mPoint.normalImpulse = cPoint.normalImpulse
      mPoint.tangentImpulse = cPoint.tangentImpulse
    Next 'j 
  Next ' i
  
End
