' /* 
' * Copyright (c) 2006-2007 Erin Catto http:
' *
' * This software is provided 'as-is', without any express or implied
' * warranty.  In no event will the authors be held liable for any damages
' * arising from the use of this software.
' * Permission is granted to anyone to use this software for any purpose
' * including commercial applications, and to alter it and redistribute it
' * freely, subject to the following restrictions:
' * 1. The origin of this software must not be misrepresented
' you must not
' * claim that you wrote the original software. If you use this software
' * in a product, an acknowledgment in the product documentation would be
' * appreciated but is not required.
' * 2. Altered source versions must be plainly marked, and must not be
' * misrepresented the original software.
' * 3. This notice may not be removed or altered from any source distribution.
' */


public	type as integer 0
public userData as variant= null
public	localPosition as variant= null
public	localRotation as variant= null
public	friction as variant= null
public	restitution as variant= null
public	density as variant= null
	' //  The collision category bits. Normally you would just set one bit.
public categoryBits as integer= 0
public maskBits as integer= 0
public groupIndex as integer= 0



public  sub _new()
		 me.type = b2Shape.e_unknownShape
		 me.userData = null
		 me.localPosition = new b2Vec2(0.0, 0.0)
		 me.localRotation = 0.0
		 me.friction = 0.2
		 me.restitution = 0.0
		 me.density = 0.0
		 me.categoryBits = 0x0001
		 me.maskBits = 0xFFFF
		 me.groupIndex = 0
end

public  sub 	ComputeMass(massData as variant)
		dim circle  as variant 
		dim box  as variant 
		dim poly  as variant

		massData.center = new b2Vec2(0.0, 0.0)
		if ( me.density = 0.0) then
			massData.mass = 0.0
			massData.center.Set(0.0, 0.0)
			massData.I = 0.0
		endif
		
		select case  me.type
		case b2Shape.e_circleShape:
				circle = me
				massData.mass = me.density * b2Settings.b2_pi * circle.radius * circle.radius
				massData.center.Set(0.0, 0.0)
				massData.I = 0.5 * (massData.mass) * circle.radius * circle.radius
		case b2Shape.e_boxShape:
				box = me
				massData.mass = 4.0 * me.density * box.extents.x * box.extents.y
				massData.center.Set(0.0, 0.0)
				massData.I = massData.mass / 3.0 * b2Math.b2Dot(box.extents, box.extents)
		case b2Shape.e_polyShape:
				poly = this
				b2Shape.PolyMass(massData, poly.vertices, poly.vertexCount, me.density)
		default
			massData.mass = 0.0
			massData.center.Set(0.0, 0.0)
			massData.I = 0.0
			break
		end select

end
