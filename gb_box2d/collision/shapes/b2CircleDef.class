' /* 
' * Copyright (c) 2006-2007 Erin Catto http:
' *
' * This software is provided 'as-is', without any express or implied
' * warranty.  In no event will the authors be held liable for any damages
' * arising from the use of this software.
' * Permission is granted to anyone to use this software for any purpose
' * including commercial applications, and to alter it and redistribute it
' * freely, subject to the following restrictions:
' * 1. The origin of this software must not be misrepresented
 you must not
' * claim that you wrote the original software. If you use this software
' * in a product, an acknowledgment in the product documentation would be
' * appreciated but is not required.
' * 2. Altered source versions must be plainly marked, and must not be
' * misrepresented the original software.
' * 3. This notice may not be removed or altered from any source distribution.
' */
dim  b2Math  as variant = Class.create()

b2Math.prototype = 
	' /* static public function b2InvSqrt(x)
		float32 xhalf = 0.5f * x
		int32 i = *(int32*)&x
		i = 0x5f3759df - (i >> 1)
		x = *(float32*)&i
		x = x * (1.5f - xhalf * x * x)
		return x
 '' TODO: posible funcion (revisar)

	*/
	' //  A * B
	' //  A^T * B
	' //  b2Math.b2Random number in range [-1,1]
	' /* inline float32 b2Math.b2Random(float32 lo, float32 hi)
		float32 r = (float32)rand()
		r /= RAND_MAX
		r = (hi - lo) * r + lo
		return r
 '' TODO: posible funcion (revisar)

	*/
	' //  "Next Largest Power of 2
	' //  Given a binary integer value x, the next largest power of 2 can be computed by a SWAR algorithm
	' //  that recursively "folds" the upper bits into the lower bits. This process yields a bit vector with
	' //  the same most significant 1, but all 1's below it. Adding 1 to that value yields the next
	' //  largest power of 2. For a 32-bit value:"
	' //  Temp vector functions to reduce calls to 'new'
	' /* static public var tempVec = new b2Vec2()
	static public var tempAABB = new b2AABB()
	*/
public  sub 	initialize()
 
public  sub b2IsValid (x as variant) as variant ''funcion
		return isFinite(x)
 '' TODO: posible funcion (revisar)

end

public  sub b2Dot (a as variant, b as variant) as variant ''funcion
		return a.x * b.x + a.y * b.y
 '' TODO: posible funcion (revisar)

end

public  sub b2CrossVV (a as variant, b as variant) as variant ''funcion
		return a.x * b.y - a.y * b.x
 '' TODO: posible funcion (revisar)

end

public  sub b2CrossVF (a as variant, s as variant) as variant ''funcion
dim 		 v  as variant = new b2Vec2(s * a.y, -s * a.x)

		return v
 '' TODO: posible funcion (revisar)

end

public  sub b2CrossFV (s as variant, a as variant) as variant ''funcion
dim 		 v  as variant = new b2Vec2(-s * a.y, s * a.x)

		return v
 '' TODO: posible funcion (revisar)

end

public  sub b2MulMV (A as variant, v as variant) as variant ''funcion
dim 		 u  as variant = new b2Vec2(A.col1.x * v.x + A.col2.x * v.y, A.col1.y * v.x + A.col2.y * v.y)

		return u
 '' TODO: posible funcion (revisar)

end

public  sub b2MulTMV (A as variant, v as variant) as variant ''funcion
dim 		 u  as variant = new b2Vec2(b2Math.b2Dot(v, A.col1), b2Math.b2Dot(v, A.col2))

		return u
 '' TODO: posible funcion (revisar)

end

public  sub AddVV (a as variant, b as variant) as variant ''funcion
dim 		 v  as variant = new b2Vec2(a.x + b.x, a.y + b.y)

		return v
 '' TODO: posible funcion (revisar)

end

public  sub SubtractVV (a as variant, b as variant) as variant ''funcion
dim 		 v  as variant = new b2Vec2(a.x - b.x, a.y - b.y)

		return v
 '' TODO: posible funcion (revisar)

end

public  sub MulFV (s as variant, a as variant) as variant ''funcion
dim 		 v  as variant = new b2Vec2(s * a.x, s * a.y)

		return v
 '' TODO: posible funcion (revisar)

end

public  sub AddMM (A as variant, B as variant) as variant ''funcion
dim 		 C  as variant = new b2Mat22(0, b2Math.AddVV(A.col1, B.col1), b2Math.AddVV(A.col2, B.col2))

		return C
 '' TODO: posible funcion (revisar)

end

public  sub b2MulMM (A as variant, B as variant) as variant ''funcion
dim 		 C  as variant = new b2Mat22(0, b2Math.b2MulMV(A, B.col1), b2Math.b2MulMV(A, B.col2))

		return C
 '' TODO: posible funcion (revisar)

end

public  sub b2MulTMM (A as variant, B as variant) as variant ''funcion
dim 		 c1  as variant = new b2Vec2(b2Math.b2Dot(A.col1, B.col1), b2Math.b2Dot(A.col2, B.col1))

dim 		 c2  as variant = new b2Vec2(b2Math.b2Dot(A.col1, B.col2), b2Math.b2Dot(A.col2, B.col2))

dim 		 C  as variant = new b2Mat22(0, c1, c2)

		return C
 '' TODO: posible funcion (revisar)

end

public  sub b2Abs (a as variant) as variant ''funcion
		return a > 0.0 ? a : -a
 '' TODO: posible funcion (revisar)

end

public  sub b2AbsV (a as variant) as variant ''funcion
dim 		 b  as variant = new b2Vec2(b2Math.b2Abs(a.x), b2Math.b2Abs(a.y))

		return b
 '' TODO: posible funcion (revisar)

end

public  sub b2AbsM (A as variant) as variant ''funcion
dim 		 B  as variant = new b2Mat22(0, b2Math.b2AbsV(A.col1), b2Math.b2AbsV(A.col2))

		return B
 '' TODO: posible funcion (revisar)

end

public  sub b2Min (a as variant, b as variant) as variant ''funcion
		return a < b ? a : b
 '' TODO: posible funcion (revisar)

end

public  sub b2MinV (a as variant, b as variant) as variant ''funcion
dim 		 c  as variant = new b2Vec2(b2Math.b2Min(a.x, b.x), b2Math.b2Min(a.y, b.y))

		return c
 '' TODO: posible funcion (revisar)

end

public  sub b2Max (a as variant, b as variant) as variant ''funcion
		return a > b ? a : b
 '' TODO: posible funcion (revisar)

end

public  sub b2MaxV (a as variant, b as variant) as variant ''funcion
dim 		 c  as variant = new b2Vec2(b2Math.b2Max(a.x, b.x), b2Math.b2Max(a.y, b.y))

		return c
 '' TODO: posible funcion (revisar)

end

public  sub b2Clamp (a as variant, low as variant, high as variant) as variant ''funcion
		return b2Math.b2Max(low, b2Math.b2Min(a, high))
 '' TODO: posible funcion (revisar)

end

public  sub b2ClampV (a as variant, low as variant, high as variant) as variant ''funcion
		return b2Math.b2MaxV(low, b2Math.b2MinV(a, high))
 '' TODO: posible funcion (revisar)

end

public  sub b2Swap (a as variant, b as variant)

dim 		 tmp  as variant = a[0]

		a[0] = b[0]
		b[0] = tmp
end

public  sub b2Random () as variant ''funcion
		return Math.random() * 2 - 1
 '' TODO: posible funcion (revisar)

end

public  sub b2NextPowerOfTwo (x as variant) as variant ''funcion
		x |= (x >> 1) & 0x7FFFFFFF
		x |= (x >> 2) & 0x3FFFFFFF
		x |= (x >> 4) & 0x0FFFFFFF
		x |= (x >> 8) & 0x00FFFFFF
		x |= (x >> 16)& 0x0000FFFF
		return x + 1
 '' TODO: posible funcion (revisar)

end

public  sub b2IsPowerOfTwo (x as variant) as variant ''funcion
dim 		 result  as variant = x > 0 && (x & (x - 1)) == 0

		return result
 '' TODO: posible funcion (revisar)

b2Math.tempVec2 = new b2Vec2()
b2Math.tempVec3 = new b2Vec2()
b2Math.tempVec4 = new b2Vec2()
b2Math.tempVec5 = new b2Vec2()
b2Math.tempMat = new b2Mat22()
﻿' /* 
' * Copyright (c) 2006-2007 Erin Catto http:
' *
' * This software is provided 'as-is', without any express or implied
' * warranty.  In no event will the authors be held liable for any damages
' * arising from the use of this software.
' * Permission is granted to anyone to use this software for any purpose
' * including commercial applications, and to alter it and redistribute it
' * freely, subject to the following restrictions:
' * 1. The origin of this software must not be misrepresented
 you must not
' * claim that you wrote the original software. If you use this software
' * in a product, an acknowledgment in the product documentation would be
' * appreciated but is not required.
' * 2. Altered source versions must be plainly marked, and must not be
' * misrepresented the original software.
' * 3. This notice may not be removed or altered from any source distribution.
' */
dim  b2Mat22  as variant = Class.create()

b2Mat22.prototype = 
end

public  sub 	initialize(angle as variant, c1 as variant, c2 as variant)

		if (angle==null) angle = 0
		' //  initialize instance variables for references
		 me.col1 = new b2Vec2()
		 me.col2 = new b2Vec2()
		' // 
		if (c1!=null && c2!=null)
			 me.col1.SetV(c1)
			 me.col2.SetV(c2)
		else
dim 			 c  as variant = Math.cos(angle)

dim 			 s  as variant = Math.sin(angle)

			 me.col1.x = c
 me.col2.x = -s
			 me.col1.y = s
 me.col2.y = c
end

public  sub 	Set(angle as variant)

dim 		 c  as variant = Math.cos(angle)

dim 		 s  as variant = Math.sin(angle)

		 me.col1.x = c
 me.col2.x = -s
		 me.col1.y = s
 me.col2.y = c
end

public  sub 	SetVV(c1 as variant, c2 as variant)

		 me.col1.SetV(c1)
		 me.col2.SetV(c2)
end

public  sub 	Copy() as variant ''funcion
		return new b2Mat22(0, me.col1, me.col2)
 '' TODO: posible funcion (revisar)

end

public  sub 	SetM(m as variant)

		 me.col1.SetV(m.col1)
		 me.col2.SetV(m.col2)
end

public  sub 	AddM(m as variant)

		 me.col1.x += m.col1.x
		 me.col1.y += m.col1.y
		 me.col2.x += m.col2.x
		 me.col2.y += m.col2.y
end

public  sub 	SetIdentity()

		 me.col1.x = 1.0
 me.col2.x = 0.0
		 me.col1.y = 0.0
 me.col2.y = 1.0
end

public  sub 	SetZero()

		 me.col1.x = 0.0
 me.col2.x = 0.0
		 me.col1.y = 0.0
 me.col2.y = 0.0
end

public  sub 	Invert(out as variant) as variant ''funcion
dim 		 a  as variant = me.col1.x

dim 		 b  as variant = me.col2.x

dim 		 c  as variant = me.col1.y

dim 		 d  as variant = me.col2.y

		' // var B = new b2Mat22()
dim 		 det  as variant = a * d - b * c

		' // b2Settings.b2Assert(det != 0.0)
		det = 1.0 / det
		out.col1.x =  det * d
	out.col2.x = -det * b
		out.col1.y = -det * c
	out.col2.y =  det * a
		return out
 '' TODO: posible funcion (revisar)

	' //  me.Solve A * x = b
end

public  sub 	Solve(out as variant, bX as variant, bY as variant) as variant ''funcion
		' // float32 a11 = me.col1.x, a12 = me.col2.x, a21 = me.col1.y, a22 = me.col2.y
dim 		 a11  as variant = me.col1.x

dim 		 a12  as variant = me.col2.x

dim 		 a21  as variant = me.col1.y

dim 		 a22  as variant = me.col2.y

		' // float32 det = a11 * a22 - a12 * a21
dim 		 det  as variant = a11 * a22 - a12 * a21

		' // b2Settings.b2Assert(det != 0.0)
		det = 1.0 / det
		out.x = det * (a22 * bX - a12 * bY)
		out.y = det * (a11 * bY - a21 * bX)
		return out
 '' TODO: posible funcion (revisar)

end

public  sub 	Abs()

		 me.col1.Abs()
		 me.col2.Abs()
Public 1: new b2Vec2(), as new 2Vec2(),
Public 2: new b2Vec2()
 as new 2Vec2()

﻿' /* 
' * Copyright (c) 2006-2007 Erin Catto http:
' *
' * This software is provided 'as-is', without any express or implied
' * warranty.  In no event will the authors be held liable for any damages
' * arising from the use of this software.
' * Permission is granted to anyone to use this software for any purpose
' * including commercial applications, and to alter it and redistribute it
' * freely, subject to the following restrictions:
' * 1. The origin of this software must not be misrepresented
 you must not
' * claim that you wrote the original software. If you use this software
' * in a product, an acknowledgment in the product documentation would be
' * appreciated but is not required.
' * 2. Altered source versions must be plainly marked, and must not be
' * misrepresented the original software.
' * 3. This notice may not be removed or altered from any source distribution.
' */
' //  b2Vec2 has no constructor so that it
' //  can be placed in a union.
dim  b2Vec2  as variant = Class.create()

b2Vec2.prototype = 
end

public  sub 	initialize(x_ as variant, y_ as variant)
  me.x=x_
 me.y=y_
end

public  sub 	SetZero()
  me.x = 0.0
 me.y = 0.0
 
end

public  sub 	Set(x_ as variant, y_ as variant)
  me.x=x_
 me.y=y_
end

public  sub 	SetV(v as variant)
  me.x=v.x
 me.y=v.y
end

public  sub 	Negative()
 return new b2Vec2(- me.x, - me.y)
  '' TODO: posible funcion (revisar)

end

public  sub 	Copy() as variant ''funcion
		return new b2Vec2( me.x, me.y)
 '' TODO: posible funcion (revisar)

end

public  sub 	Add(v as variant)

		 me.x += v.x
 me.y += v.y
end

public  sub 	Subtract(v as variant)

		 me.x -= v.x
 me.y -= v.y
end

public  sub 	Multiply(a as variant)

		 me.x *= a
 me.y *= a
end

public  sub 	MulM(A as variant)

dim 		 tX  as variant = me.x

		 me.x = A.col1.x * tX + A.col2.x * me.y
		 me.y = A.col1.y * tX + A.col2.y * me.y
end

public  sub 	MulTM(A as variant)

dim 		 tX  as variant = b2Math.b2Dot(this, A.col1)

		 me.y = b2Math.b2Dot(this, A.col2)
		 me.x = tX
end

public  sub 	CrossVF(s as variant)

dim 		 tX  as variant = me.x

		 me.x = s * me.y
		 me.y = -s * tX
end

public  sub 	CrossFV(s as variant)

dim 		 tX  as variant = me.x

		 me.x = -s * me.y
		 me.y = s * tX
end

public  sub 	MinV(b as variant)

		 me.x = me.x < b.x ? me.x : b.x
		 me.y = me.y < b.y ? me.y : b.y
end

public  sub 	MaxV(b as variant)

		 me.x = me.x > b.x ? me.x : b.x
		 me.y = me.y > b.y ? me.y : b.y
end

public  sub 	Abs()

		 me.x = Math.abs( me.x)
		 me.y = Math.abs( me.y)
end

public  sub 	Length() as variant ''funcion
		return Math.sqrt( me.x * me.x + me.y * me.y)
 '' TODO: posible funcion (revisar)

end

public  sub 	Normalize() as variant ''funcio as variant ''funcion
dim 		 length  as variant = me.Length()

		if (length < Number.MIN_VALUE)
			return 0.0
 '' TODO: posible funcion (revisar)

dim 		 invLength  as variant = 1.0 / length

		 me.x *= invLength
		 me.y *= invLength
		return length
 '' TODO: posible funcion (revisar)

end

public  sub 	IsValid() as variant ''funcion
		return b2Math.b2IsValid( me.x) && b2Math.b2IsValid( me.y)
 '' TODO: posible funcion (revisar)

	x: null
	y: null
end

public  sub Make (x_ as variant, y_ as variant) as variant ''funcion
		return new b2Vec2(x_, y_)
 '' TODO: posible funcion (revisar)

﻿' /* 
' * Copyright (c) 2006-2007 Erin Catto http:
' *
' * This software is provided 'as-is', without any express or implied
' * warranty.  In no event will the authors be held liable for any damages
' * arising from the use of this software.
' * Permission is granted to anyone to use this software for any purpose
' * including commercial applications, and to alter it and redistribute it
' * freely, subject to the following restrictions:
' * 1. The origin of this software must not be misrepresented
 you must not
' * claim that you wrote the original software. If you use this software
' * in a product, an acknowledgment in the product documentation would be
' * appreciated but is not required.
' * 2. Altered source versions must be plainly marked, and must not be
' * misrepresented the original software.
' * 3. This notice may not be removed or altered from any source distribution.
' */
dim  b2Settings  as variant = Class.create()

b2Settings.prototype = 
	' //  Define your unit system here. The default system is
	' //  meters-kilograms-seconds. For the tuning to work well
	' //  your dynamic objects should be bigger than a pebble and smaller
	' //  than a house.
	' // static public const b2Settings.b2_lengthUnitsPerMeter = 1.0
	' //  Use this for pixels:
	' //  Global tuning constants based on MKS units.
	' //  Collision
	' //  Dynamics
	' //  Sleep
	' //  assert
end

public  sub 	initialize()
 
b2Settings.USHRT_MAX = 0x0000ffff
b2Settings.b2_pi = Math.PI
b2Settings.b2_massUnitsPerKilogram = 1.0
b2Settings.b2_timeUnitsPerSecond = 1.0
b2Settings.b2_lengthUnitsPerMeter = 30.0
b2Settings.b2_maxManifoldPoints = 2
b2Settings.b2_maxShapesPerBody = 64
b2Settings.b2_maxPolyVertices = 8
b2Settings.b2_maxProxies = 1024
b2Settings.b2_maxPairs = 8 * b2Settings.b2_maxProxies
b2Settings.b2_linearSlop = 0.005 * b2Settings.b2_lengthUnitsPerMeter
b2Settings.b2_angularSlop = 2.0 / 180.0 * b2Settings.b2_pi
b2Settings.b2_velocityThreshold = 1.0 * b2Settings.b2_lengthUnitsPerMeter / b2Settings.b2_timeUnitsPerSecond
b2Settings.b2_maxLinearCorrection = 0.2 * b2Settings.b2_lengthUnitsPerMeter
b2Settings.b2_maxAngularCorrection = 8.0 / 180.0 * b2Settings.b2_pi
b2Settings.b2_contactBaumgarte = 0.2
b2Settings.b2_timeToSleep = 0.5 * b2Settings.b2_timeUnitsPerSecond
b2Settings.b2_linearSleepTolerance = 0.01 * b2Settings.b2_lengthUnitsPerMeter / b2Settings.b2_timeUnitsPerSecond
b2Settings.b2_angularSleepTolerance = 2.0 / 180.0 / b2Settings.b2_timeUnitsPerSecond
end

public  sub b2Assert (a as variant)

		if (!a)
dim 			nullVec
 as variant
			nullVec.x++
﻿' /* 
' * Copyright (c) 2006-2007 Erin Catto http:
' *
' * This software is provided 'as-is', without any express or implied
' * warranty.  In no event will the authors be held liable for any damages
' * arising from the use of this software.
' * Permission is granted to anyone to use this software for any purpose
' * including commercial applications, and to alter it and redistribute it
' * freely, subject to the following restrictions:
' * 1. The origin of this software must not be misrepresented
 you must not
' * claim that you wrote the original software. If you use this software
' * in a product, an acknowledgment in the product documentation would be
' * appreciated but is not required.
' * 2. Altered source versions must be plainly marked, and must not be
' * misrepresented the original software.
' * 3. This notice may not be removed or altered from any source distribution.
' */
dim  b2CircleDef  as variant = Class.create()

inherits , b2ShapeDef
inherits 
end

public  sub 	initialize()

		' //  The constructor for b2ShapeDef
		 me.type = b2Shape.e_unknownShape
		 me.userData = null
		 me.localPosition = new b2Vec2(0.0, 0.0)
		 me.localRotation = 0.0
		 me.friction = 0.2
		 me.restitution = 0.0
		 me.density = 0.0
		 me.categoryBits = 0x0001
		 me.maskBits = 0xFFFF
		 me.groupIndex = 0
	
		' // 
		 me.type = b2Shape.e_circleShape
		 me.radius = 1.0
	radius: null)