'gambas class
'b2math 
ï»¿' /* 
' * Copyright (c) 2006-2007 Erin Catto http:
' *
' * This software is provided 'as-is', without any express or implied
' * warranty.  In no event will the authors be held liable for any damages
' * arising from the use of this software.
' * Permission is granted to anyone to use this software for any purpose
' * including commercial applications, and to alter it and redistribute it
' * freely, subject to the following restrictions:
' * 1. The origin of this software must not be misrepresented
' you must not
' * claim that you wrote the original software. If you use this software
' * in a product, an acknowledgment in the product documentation would be
' * appreciated but is not required.
' * 2. Altered source versions must be plainly marked, and must not be
' * misrepresented the original software.
' * 3. This notice may not be removed or altered from any source distribution.
' */

public tempVec2 as new b2Vec2()
public tempVec3 as new b2Vec2()
public tempVec4 as new b2Vec2()
public tempVec5 as new b2Vec2()
public tempMat as new b2Mat22()


public function b2IsValid(x as float) as boolean
		return isFinite(x);
end

public function isfinite(x as float) as boolean

	if isNan(x) then 
		return false
	endif

	if isNull(x) then 
		return false
	endif

	if isNumber(x) then  
			return true
		else
			return false
	endif

end

public function b2Dot(a as flot, b as float) as float
		return a.x * b.x + a.y * b.y
end


public function b2CrossVV(a as flot, b as float) as float
		return a.x * b.y - a.y * b.x
end

public function b2CrossVF(a as variant, s as variant) as b2Vec2
''TODO: revisar esta funcion los parametros de entrada
		dim v as new b2Vec2(s * a.y, -s * a.x)
		return v
end

public function b2CrossFV(s as variant, a as variant ) as b2Vec2
		dim  v = new b2Vec2(-s * a.y, s * a.x)
		return v
end

public function b2MulMV(A as variant, v as variant) as b2Vec2
		dim  u =  new b2Vec2(A.col1.x * v.x + A.col2.x * v.y, A.col1.y * v.x + A.col2.y * v.y)
		return u
end


public function b2MulTMV(A as variant, v as variant) as b2vec2
			dim u as new b2Vec2(me.b2Dot(v, A.col1), me.b2Dot(v, A.col2))
		return u
end

public function AddVV(a as variant, b as variant) as b2Vec2
	dim  v as new b2Vec2(a.x + b.x, a.y + b.y)
		return v
end

public function SubtractVV(a as variant, b as variant) as b2Vec2
		dim v as  new b2Vec2(a.x - b.x, a.y - b.y)
		return v
end

public function MulFV(s as variant, a as variant) as b2Vec2
		dim v as new b2Vec2(s * a.x, s * a.y)
		return v
end

public function AddMM(A as variant, B as variant) as b2Mat22
	dim  C as new b2Mat22(0, me.AddVV(A.col1, B.col1), me.AddVV(A.col2, B.col2))
		return C
end

public function b2MulMM(A as variant , B as variant) as b2Mat22
	dim C as new b2Mat22(0, me.b2MulMV(A, B.col1), me.b2MulMV(A, B.col2))
		return C
end

public function b2MulTMM(A as variant , B as variant ) as b2Mat22
	dim  c1 as  new b2Vec2(me.b2Dot(A.col1, B.col1), me.b2Dot(A.col2, B.col1))
	dim c2 as new b2Vec2(me.b2Dot(A.col1, B.col2), me.b2Dot(A.col2, B.col2))
	dim c as new b2Mat22(0, c1, c2)
	return C
end

public function b2Abs(a as float) as float
		return abs(a)
end


public function b2AbsV(a as variant)  as b2Vec2
	dim b as  new b2Vec2(me.b2Abs(a.x), me.b2Abs(a.y))
		return b
end

public function b2AbsM(A as variant) as b2Mat22
 	dim B as  new b2Mat22(0, me.b2AbsV(A.col1), me.b2AbsV(A.col2))
		return B
end

public function b2Min(a as float, b as float) as float
			return min(a,b)
end

public function b2MinV(a as variant , b as variant )  as b2Vec2
	dim c as  new b2Vec2(me.b2Min(a.x, b.x), me.b2Min(a.y, b.y))
	return c
end


public function b2Max(a as float, b as float) as float
		return max(a,b)
end
-----------------------------------------------------------------

public function b2MaxV(a as variant , b as variant) as b2Vec2
	dim  c as  new b2Vec2(me.b2Max(a.x, b.x), me.b2Max(a.y, b.y))
		return c
end

public function b2Clamp(a as variant , low as variant, high as variant) as float
		return me.b2Max(low, me.b2Min(a, high))
end

public function b2ClampV(a, low, high)  as b2Vec2
		return me.b2MaxV(low, me.b2MinV(a, high))
end

public sub b2Swap (a as variant, b as variant)
	dim  tmp as variant =  a[0]
		a[0] = b[0]
		b[0] = tmp
end

public function b2Random() as float
		return (rnd(0,2)-1)
end

	
''http://www.gambas-es.org/viewtopic.php?f=19&t=5311&highlight=

Private Function b2NextPowerOfTwo(x As Integer) As Integer
  
  x = x Or (x \ CInt(2 ^ 1)) And &7FFFFFFF&
  x = x Or (x \ CInt(2 ^ 2)) And &3FFFFFFF&
  x = x Or (x \ CInt(2 ^ 4)) And &0FFFFFFF&
  x = x Or (x \ CInt(2 ^ 8)) And &00FFFFFF&
  x = x Or (x \ CInt(2 ^ 16)) And &0000FFFF&
  Return x + 1
  
End

Private Function b2IsPowerOfTwo(x As Integer) As Integer
  
  If (x > 0) And ((x And (x - 1)) = 0) Then Return True
  Return False
  
End



