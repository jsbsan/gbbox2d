'gambas class'

'"b2mat22"

ï»¿' /* 
' * Copyright (c) 2006-2007 Erin Catto http:
' *
' * This software is provided 'as-is', without any express or implied
' * warranty.  In no event will the authors be held liable for any damages
' * arising from the use of this software.
' * Permission is granted to anyone to use this software for any purpose
' * including commercial applications, and to alter it and redistribute it
' * freely, subject to the following restrictions:
' * 1. The origin of this software must not be misrepresented
' you must not
' * claim that you wrote the original software. If you use this software
' * in a product, an acknowledgment in the product documentation would be
' * appreciated but is not required.
' * 2. Altered source versions must be plainly marked, and must not be
' * misrepresented the original software.
' * 3. This notice may not be removed or altered from any source distribution.
' */


public col1 as new b2Vec2()
public col2 as new b2Vec2()


public sub initialize(angle as float,c1 as variant,c2 as variant)
	 dim c,s as float
	 if isnull(angle) then angle=0
	
	me.col1=new b2Vec2()
	me.col2=new b2Vec2()

	if (not (isnull(c1))) and (not (isnull(c2)))  then
				me.col1.SetV(c1)
				me.col2.SetV(c2)
			else
				c = cos(angle)
				s = sin(angle)
				me.col1.x = c
				me.col2.x = -s
				me.col1.y = s
				me.col2.y = c	
	endif

end

public sub set(angle as float)
		c = cos(angle)
		s = sin(angle)
		me.col1.x = c
		me.col2.x = -s
		me.col1.y = s
		me.col2.y = c	
end

public sub SetW(c1 as variant, c2 as variant)
	me.col1.SetV(c1)
	me.col2.SetV(c2)
end

public function Copy() as b2mat22
	return new b2mat22(0,me.col1,me.col2)
end

public sub SetM(m as variant)
	me.col1.SetV(m.col1)
	me.col2.SetV(m.col2)
end


public sub AddM(m  as variant)
		me.col1.x += m.col1.x
		me.col1.y += m.col1.y
		me.col2.x += m.col2.x
		me.col2.y += m.col2.y
end

public sub	SetIdentity()
		me.col1.x = 1.0
		me.col2.x = 0.0
		me.col1.y = 0.0
		me.col2.y = 1.0
end


public sub	SetZero()
		me.col1.x = 0.0
		me.col2.x = 0.0
		me.col1.y = 0.0
		me.col2.y = 0.0
end

public function Invert(out as variant) as variant
	dim a,b,c,d as float
	dim det as float

	a = this.col1.x
	b = this.col2.x
	c = this.col1.y
	d = this.col2.y
	
	//var B = new b2Mat22();
	det = a * d - b * c;
	//b2Settings.b2Assert(det != 0.0);
	det = 1.0 / det;
	out.col1.x =  det * d
	out.col2.x = -det * b
	out.col1.y = -det * c
	out.col2.y =  det * a
	return out
end


' this.Solve A * x = b
public sub solve(out as variant,bX as float, bY as float) as variant
	dim a11,a12,a21,a22 as float
		//float32 a11 = this.col1.x, a12 = this.col2.x, a21 = this.col1.y, a22 = this.col2.y;
		 a11 = me.col1.x
		 a12 = me.col2.x
		 a21 = me.col1.y
		 a22 = me.col2.y
		//float32 det = a11 * a22 - a12 * a21;
		 det = a11 * a22 - a12 * a21
		//b2Settings.b2Assert(det != 0.0);
		det = 1.0 / det
		out.x = det * (a22 * bX - a12 * bY)
		out.y = det * (a11 * bY - a21 * bX)
	return out

end

public sub Abs()
	me.col1.Abs()
	me.col2.Abs()
end