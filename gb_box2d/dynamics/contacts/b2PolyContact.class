' * Copyright (c) 2006-2007 Erin Catto http:
' *
' * This software is provided 'as-is', without any express or implied
' * warranty.  In no event will the authors be held liable for any damages
' * arising from the use of this software.
' * Permission is granted to anyone to use this software for any purpose
' * including commercial applications, and to alter it and redistribute it
' * freely, subject to the following restrictions:
' * 1. The origin of this software must not be misrepresented
 you must not
' * claim that you wrote the original software. If you use this software
' * in a product, an acknowledgment in the product documentation would be
' * appreciated but is not required.
' * 2. Altered source versions must be plainly marked, and must not be
' * misrepresented the original software.
' * 3. This notice may not be removed or altered from any source distribution.
' */
dim  b2PolyContact  as variant = Class.create()

inherits , b2Contact
inherits 
end

public  sub 		initialize(s1 as variant, s2 as variant)
 as variant ''funcion
		' //  The constructor for b2Contact
		' //  initialize instance variables for references
		 me.m_node1 = new b2ContactNode()
		 me.m_node2 = new b2ContactNode()
		' // 
		 me.m_flags = 0
		if (!s1 || !s2)
			 me.m_shape1 = null
			 me.m_shape2 = null
			return
 '' TODO: posible funcion (revisar)

		 me.m_shape1 = s1
		 me.m_shape2 = s2
		 me.m_manifoldCount = 0
		 me.m_friction = Math.sqrt( me.m_shape1.m_friction * me.m_shape2.m_friction)
		 me.m_restitution = b2Math.b2Max( me.m_shape1.m_restitution, me.m_shape2.m_restitution)
		 me.m_prev = null
		 me.m_next = null
		 me.m_node1.contact = null
		 me.m_node1.prev = null
		 me.m_node1.next = null
		 me.m_node1.other = null
		 me.m_node2.contact = null
		 me.m_node2.prev = null
		 me.m_node2.next = null
		 me.m_node2.other = null
		' // 
		' //  initialize instance variables for references
		 me.m0 = new b2Manifold()
		 me.m_manifold = [new b2Manifold()]
		' // 
		' // super(shape1, shape2)
		' // b2Settings.b2Assert( me.m_shape1.m_type == b2Shape.e_polyShape)
		' // b2Settings.b2Assert( me.m_shape2.m_type == b2Shape.e_polyShape)
		 me.m_manifold[0].pointCount = 0
	' // ~b2PolyContact() 
	' //  store temp manifold to reduce calls to new
Public 0: new b2Manifold(), as new 2Manifold(),
end

public  sub 	Evaluate()

dim 		 tMani  as variant = me.m_manifold[0]

		' //  replace memcpy
		' //  memcpy(& me.m0, & me.m_manifold, sizeof(b2Manifold))
		' // me.m0.points = new Array(tMani.pointCount)
dim 		 tPoints  as variant = me.m0.points

		for (var k = 0; k < tMani.pointCount; k++)
dim 			 tPoint  as variant = tPoints[k]

dim 			 tPoint0  as variant = tMani.points[k]

			' // tPoint.separation = tPoint0.separation
			tPoint.normalImpulse = tPoint0.normalImpulse
			tPoint.tangentImpulse = tPoint0.tangentImpulse
			' // tPoint.position.SetV( tPoint0.position )
			tPoint.id = tPoint0.id.Copy()
			' /* me.m0.points[k].id.features = new Features()
			 me.m0.points[k].id.features.referenceFace = me.m_manifold[0].points[k].id.features.referenceFace
			 me.m0.points[k].id.features.incidentEdge = me.m_manifold[0].points[k].id.features.incidentEdge
			 me.m0.points[k].id.features.incidentVertex = me.m_manifold[0].points[k].id.features.incidentVertex
			 me.m0.points[k].id.features.flip = me.m_manifold[0].points[k].id.features.flip
*/
		' // me.m0.normal.SetV( tMani.normal )
		 me.m0.pointCount = tMani.pointCount
		b2Collision.b2CollidePoly(tMani, me.m_shape1, me.m_shape2, false)
		' //  Match contact ids to facilitate warm starting.
		if (tMani.pointCount > 0)
dim 			 match  as variant = [false, false]

			' //  Match old contact ids to new contact ids and copy the
			' //  stored impulses to warm start the solver.
			for (var i = 0; i < tMani.pointCount; ++i)
			
dim 				 cp  as variant = tMani.points[ i ]

				cp.normalImpulse = 0.0
				cp.tangentImpulse = 0.0
dim 				 idKey  as variant = cp.id.key

				for (var j = 0; j < me.m0.pointCount; ++j)
				
					if (match[j] == true)
						continue
dim 					 cp0  as variant = me.m0.points[j]

dim 					 id0  as variant = cp0.id

					if (id0.key == idKey)
					
						match[j] = true
						cp.normalImpulse = cp0.normalImpulse
						cp.tangentImpulse = cp0.tangentImpulse
						break
					
				
			
			 me.m_manifoldCount = 1
		else
			 me.m_manifoldCount = 0
end

public  sub 	GetManifolds() as variant ''funcion
		return me.m_manifold
 '' TODO: posible funcion (revisar)

	m_manifold: [new b2Manifold()])
end

public  sub Create (shape1 as variant, shape2 as variant, allocator as variant) as variant ''funcion
		' // void* mem = allocator->Allocate(sizeof(b2PolyContact))
		return new b2PolyContact(shape1, shape2)
 '' TODO: posible funcion (revisar)

end

public  sub Destroy (contact as variant, allocator as variant)

		' // ((b2PolyContact*)contact)->~b2PolyContact()
		' // allocator->Free(contact, sizeof(b2PolyContact))