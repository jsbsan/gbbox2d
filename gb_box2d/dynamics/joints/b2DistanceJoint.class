' * Copyright (c) 2006-2007 Erin Catto http:
' *
' * This software is provided 'as-is', without any express or implied
' * warranty.  In no event will the authors be held liable for any damages
' * arising from the use of this software.
' * Permission is granted to anyone to use this software for any purpose
' * including commercial applications, and to alter it and redistribute it
' * freely, subject to the following restrictions:
' * 1. The origin of this software must not be misrepresented
 you must not
' * claim that you wrote the original software. If you use this software
' * in a product, an acknowledgment in the product documentation would be
' * appreciated but is not required.
' * 2. Altered source versions must be plainly marked, and must not be
' * misrepresented the original software.
' * 3. This notice may not be removed or altered from any source distribution.
' */
' //  C = norm(p2 - p1) - L
' //  u = (p2 - p1) / norm(p2 - p1)
' //  Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))
' //  J = [-u -cross(r1, u) u cross(r2, u)]
' //  K = J * invM * JT
' //    = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2
dim  b2DistanceJoint  as variant = Class.create()

inherits , b2Joint
inherits 
	' // --------------- Internals Below -------------------
end

public  sub 	initialize(def as variant)

		' //  The constructor for b2Joint
		' //  initialize instance variables for references
		 me.m_node1 = new b2JointNode()
		 me.m_node2 = new b2JointNode()
		' // 
		 me.m_type = def.type
		 me.m_prev = null
		 me.m_next = null
		 me.m_body1 = def.body1
		 me.m_body2 = def.body2
		 me.m_collideConnected = def.collideConnected
		 me.m_islandFlag = false
		 me.m_userData = def.userData
		' // 
		' //  initialize instance variables for references
		 me.m_localAnchor1 = new b2Vec2()
		 me.m_localAnchor2 = new b2Vec2()
		 me.m_u = new b2Vec2()
		' // 
		' // super(def)
dim 		tMat
 as variant
dim 		tX
 as variant
dim 		tY
 as variant
		' // me.m_localAnchor1 = b2MulT( me.m_body1->m_R, def->anchorPoint1 - me.m_body1->m_position)
		tMat = me.m_body1.m_R
		tX = def.anchorPoint1.x - me.m_body1.m_position.x
		tY = def.anchorPoint1.y - me.m_body1.m_position.y
		 me.m_localAnchor1.x = tX*tMat.col1.x + tY*tMat.col1.y
		 me.m_localAnchor1.y = tX*tMat.col2.x + tY*tMat.col2.y
		' // me.m_localAnchor2 = b2MulT( me.m_body2->m_R, def->anchorPoint2 - me.m_body2->m_position)
		tMat = me.m_body2.m_R
		tX = def.anchorPoint2.x - me.m_body2.m_position.x
		tY = def.anchorPoint2.y - me.m_body2.m_position.y
		 me.m_localAnchor2.x = tX*tMat.col1.x + tY*tMat.col1.y
		 me.m_localAnchor2.y = tX*tMat.col2.x + tY*tMat.col2.y
		' // b2Vec2 d = def->anchorPoint2 - def->anchorPoint1
		tX = def.anchorPoint2.x - def.anchorPoint1.x
		tY = def.anchorPoint2.y - def.anchorPoint1.y
		' // me.m_length = d.Length()
		 me.m_length = Math.sqrt(tX*tX + tY*tY)
		 me.m_impulse = 0.0
end

public  sub 	PrepareVelocitySolver()

dim 		tMat
 as variant
		' //  Compute the effective mass matrix.
		' // b2Vec2 r1 = b2Mul( me.m_body1->m_R, me.m_localAnchor1)
		tMat = me.m_body1.m_R
dim 		 r1X  as variant = tMat.col1.x * me.m_localAnchor1.x + tMat.col2.x * me.m_localAnchor1.y

dim 		 r1Y  as variant = tMat.col1.y * me.m_localAnchor1.x + tMat.col2.y * me.m_localAnchor1.y

		' // b2Vec2 r2 = b2Mul( me.m_body2->m_R, me.m_localAnchor2)
		tMat = me.m_body2.m_R
dim 		 r2X  as variant = tMat.col1.x * me.m_localAnchor2.x + tMat.col2.x * me.m_localAnchor2.y

dim 		 r2Y  as variant = tMat.col1.y * me.m_localAnchor2.x + tMat.col2.y * me.m_localAnchor2.y

		' // me.m_u = me.m_body2->m_position + r2 - me.m_body1->m_position - r1
		 me.m_u.x = me.m_body2.m_position.x + r2X - me.m_body1.m_position.x - r1X
		 me.m_u.y = me.m_body2.m_position.y + r2Y - me.m_body1.m_position.y - r1Y
		' //  Handle singularity.
		' // float32 length = me.m_u.Length()
dim 		 length  as variant = Math.sqrt( me.m_u.x* me.m_u.x + me.m_u.y* me.m_u.y)

		if (length > b2Settings.b2_linearSlop)
			' // me.m_u *= 1.0 / length
			 me.m_u.Multiply( 1.0 / length )
		else
			 me.m_u.SetZero()
		' // float32 cr1u = b2Cross(r1, me.m_u)
dim 		 cr1u  as variant = (r1X * me.m_u.y - r1Y * me.m_u.x)

		' // float32 cr2u = b2Cross(r2, me.m_u)
dim 		 cr2u  as variant = (r2X * me.m_u.y - r2Y * me.m_u.x)

		' // me.m_mass = me.m_body1->m_invMass + me.m_body1->m_invI * cr1u * cr1u + me.m_body2->m_invMass + me.m_body2->m_invI * cr2u * cr2u
		 me.m_mass = me.m_body1.m_invMass + me.m_body1.m_invI * cr1u * cr1u + me.m_body2.m_invMass + me.m_body2.m_invI * cr2u * cr2u
		' // b2Settings.b2Assert( me.m_mass > Number.MIN_VALUE)
		 me.m_mass = 1.0 / me.m_mass
		if (b2World.s_enableWarmStarting)
			' // b2Vec2 P = me.m_impulse * me.m_u
dim 			 PX  as variant = me.m_impulse * me.m_u.x

dim 			 PY  as variant = me.m_impulse * me.m_u.y

			' // me.m_body1.m_linearVelocity -= me.m_body1.m_invMass * P
			 me.m_body1.m_linearVelocity.x -= me.m_body1.m_invMass * PX
			 me.m_body1.m_linearVelocity.y -= me.m_body1.m_invMass * PY
			' // me.m_body1.m_angularVelocity -= me.m_body1.m_invI * b2Cross(r1, P)
			 me.m_body1.m_angularVelocity -= me.m_body1.m_invI * (r1X * PY - r1Y * PX)
			' // me.m_body2.m_linearVelocity += me.m_body2.m_invMass * P
			 me.m_body2.m_linearVelocity.x += me.m_body2.m_invMass * PX
			 me.m_body2.m_linearVelocity.y += me.m_body2.m_invMass * PY
			' // me.m_body2.m_angularVelocity += me.m_body2.m_invI * b2Cross(r2, P)
			 me.m_body2.m_angularVelocity += me.m_body2.m_invI * (r2X * PY - r2Y * PX)
		else
			 me.m_impulse = 0.0
end

public  sub 	SolveVelocityConstraints(step as variant)

dim 		tMat
 as variant
		' // b2Vec2 r1 = b2Mul( me.m_body1->m_R, me.m_localAnchor1)
		tMat = me.m_body1.m_R
dim 		 r1X  as variant = tMat.col1.x * me.m_localAnchor1.x + tMat.col2.x * me.m_localAnchor1.y

dim 		 r1Y  as variant = tMat.col1.y * me.m_localAnchor1.x + tMat.col2.y * me.m_localAnchor1.y

		' // b2Vec2 r2 = b2Mul( me.m_body2->m_R, me.m_localAnchor2)
		tMat = me.m_body2.m_R
dim 		 r2X  as variant = tMat.col1.x * me.m_localAnchor2.x + tMat.col2.x * me.m_localAnchor2.y

dim 		 r2Y  as variant = tMat.col1.y * me.m_localAnchor2.x + tMat.col2.y * me.m_localAnchor2.y

		' //  Cdot = dot(u, v + cross(w, r))
		' // b2Vec2 v1 = me.m_body1->m_linearVelocity + b2Cross( me.m_body1->m_angularVelocity, r1)
dim 		 v1X  as variant = me.m_body1.m_linearVelocity.x + (- me.m_body1.m_angularVelocity * r1Y)

dim 		 v1Y  as variant = me.m_body1.m_linearVelocity.y + ( me.m_body1.m_angularVelocity * r1X)

		' // b2Vec2 v2 = me.m_body2->m_linearVelocity + b2Cross( me.m_body2->m_angularVelocity, r2)
dim 		 v2X  as variant = me.m_body2.m_linearVelocity.x + (- me.m_body2.m_angularVelocity * r2Y)

dim 		 v2Y  as variant = me.m_body2.m_linearVelocity.y + ( me.m_body2.m_angularVelocity * r2X)

		' // float32 Cdot = b2Dot( me.m_u, v2 - v1)
dim 		 Cdot  as variant = ( me.m_u.x * (v2X - v1X) + me.m_u.y * (v2Y - v1Y))

		' // float32 impulse = - me.m_mass * Cdot
dim 		 impulse  as variant = - me.m_mass * Cdot

		 me.m_impulse += impulse
		' // b2Vec2 P = impulse * me.m_u
dim 		 PX  as variant = impulse * me.m_u.x

dim 		 PY  as variant = impulse * me.m_u.y

		' // me.m_body1->m_linearVelocity -= me.m_body1->m_invMass * P
		 me.m_body1.m_linearVelocity.x -= me.m_body1.m_invMass * PX
		 me.m_body1.m_linearVelocity.y -= me.m_body1.m_invMass * PY
		' // me.m_body1->m_angularVelocity -= me.m_body1->m_invI * b2Cross(r1, P)
		 me.m_body1.m_angularVelocity -= me.m_body1.m_invI * (r1X * PY - r1Y * PX)
		' // me.m_body2->m_linearVelocity += me.m_body2->m_invMass * P
		 me.m_body2.m_linearVelocity.x += me.m_body2.m_invMass * PX
		 me.m_body2.m_linearVelocity.y += me.m_body2.m_invMass * PY
		' // me.m_body2->m_angularVelocity += me.m_body2->m_invI * b2Cross(r2, P)
		 me.m_body2.m_angularVelocity += me.m_body2.m_invI * (r2X * PY - r2Y * PX)
end

public  sub 	SolvePositionConstraints() as variant ''funcion
dim 		tMat
 as variant
		' // b2Vec2 r1 = b2Mul( me.m_body1->m_R, me.m_localAnchor1)
		tMat = me.m_body1.m_R
dim 		 r1X  as variant = tMat.col1.x * me.m_localAnchor1.x + tMat.col2.x * me.m_localAnchor1.y

dim 		 r1Y  as variant = tMat.col1.y * me.m_localAnchor1.x + tMat.col2.y * me.m_localAnchor1.y

		' // b2Vec2 r2 = b2Mul( me.m_body2->m_R, me.m_localAnchor2)
		tMat = me.m_body2.m_R
dim 		 r2X  as variant = tMat.col1.x * me.m_localAnchor2.x + tMat.col2.x * me.m_localAnchor2.y

dim 		 r2Y  as variant = tMat.col1.y * me.m_localAnchor2.x + tMat.col2.y * me.m_localAnchor2.y

		' // b2Vec2 d = me.m_body2->m_position + r2 - me.m_body1->m_position - r1
dim 		 dX  as variant = me.m_body2.m_position.x + r2X - me.m_body1.m_position.x - r1X

dim 		 dY  as variant = me.m_body2.m_position.y + r2Y - me.m_body1.m_position.y - r1Y

		' // float32 length = d.Normalize()
dim 		 length  as variant = Math.sqrt(dX*dX + dY*dY)

		dX /= length
		dY /= length
		' // float32 C = length - me.m_length
dim 		 C  as variant = length - me.m_length

		C = b2Math.b2Clamp(C, -b2Settings.b2_maxLinearCorrection, b2Settings.b2_maxLinearCorrection)
dim 		 impulse  as variant = - me.m_mass * C

		' // me.m_u = d
		 me.m_u.Set(dX, dY)
		' // b2Vec2 P = impulse * me.m_u
dim 		 PX  as variant = impulse * me.m_u.x

dim 		 PY  as variant = impulse * me.m_u.y

		' // me.m_body1->m_position -= me.m_body1->m_invMass * P
		 me.m_body1.m_position.x -= me.m_body1.m_invMass * PX
		 me.m_body1.m_position.y -= me.m_body1.m_invMass * PY
		' // me.m_body1->m_rotation -= me.m_body1->m_invI * b2Cross(r1, P)
		 me.m_body1.m_rotation -= me.m_body1.m_invI * (r1X * PY - r1Y * PX)
		' // me.m_body2->m_position += me.m_body2->m_invMass * P
		 me.m_body2.m_position.x += me.m_body2.m_invMass * PX
		 me.m_body2.m_position.y += me.m_body2.m_invMass * PY
		' // me.m_body2->m_rotation -= me.m_body2->m_invI * b2Cross(r2, P)
		 me.m_body2.m_rotation += me.m_body2.m_invI * (r2X * PY - r2Y * PX)
		 me.m_body1.m_R.Set( me.m_body1.m_rotation)
		 me.m_body2.m_R.Set( me.m_body2.m_rotation)
		return b2Math.b2Abs(C) < b2Settings.b2_linearSlop
 '' TODO: posible funcion (revisar)

end

public  sub 	GetAnchor1() as variant ''funcion
		return b2Math.AddVV( me.m_body1.m_position , b2Math.b2MulMV( me.m_body1.m_R, me.m_localAnchor1))
 '' TODO: posible funcion (revisar)

end

public  sub 	GetAnchor2() as variant ''funcion
		return b2Math.AddVV( me.m_body2.m_position , b2Math.b2MulMV( me.m_body2.m_R, me.m_localAnchor2))
 '' TODO: posible funcion (revisar)

end

public  sub 	GetReactionForce(invTimeStep as variant) as variant ''funcion
		' // var F = ( me.m_impulse * invTimeStep) * me.m_u
dim 		 F  as variant = new b2Vec2()

		F.SetV( me.m_u)
		F.Multiply( me.m_impulse * invTimeStep)
		return F
 '' TODO: posible funcion (revisar)

end

public  sub 	GetReactionTorque(invTimeStep as variant) as variant ''funcion
		' // NOT_USED(invTimeStep)
		return 0.0
 '' TODO: posible funcion (revisar)

Public 1: new b2Vec2(), as new 2Vec2(),
Public 2: new b2Vec2(), as new 2Vec2(),
Public u: new b2Vec2(), as new 2Vec2(),
	m_impulse: null
	m_mass: null
	m_length: null)