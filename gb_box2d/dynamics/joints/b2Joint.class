
' * Copyright (c) 2006-2007 Erin Catto http:
' *
' * This software is provided 'as-is', without any express or implied
' * warranty.  In no event will the authors be held liable for any damages
' * arising from the use of this software.
' * Permission is granted to anyone to use this software for any purpose
' * including commercial applications, and to alter it and redistribute it
' * freely, subject to the following restrictions:
' * 1. The origin of this software must not be misrepresented
 you must not
' * claim that you wrote the original software. If you use this software
' * in a product, an acknowledgment in the product documentation would be
' * appreciated but is not required.
' * 2. Altered source versions must be plainly marked, and must not be
' * misrepresented the original software.
' * 3. This notice may not be removed or altered from any source distribution.
' */
dim  b2Joint  as variant = Class.create()

b2Joint.prototype = 
end

public  sub 	GetType() as variant ''funcion
		return me.m_type
 '' TODO: posible funcion (revisar)

end

public  sub 	GetAnchor1()
return null '' TODO: posible funcion (revisar)

end

public  sub 	GetAnchor2()
return null '' TODO: posible funcion (revisar)

end

public  sub 	GetReactionForce(invTimeStep as variant)
return null '' TODO: posible funcion (revisar)

end

public  sub 	GetReactionTorque(invTimeStep as variant)
return 0.0 '' TODO: posible funcion (revisar)

end

public  sub 	GetBody1() as variant ''funcion
		return me.m_body1
 '' TODO: posible funcion (revisar)

end

public  sub 	GetBody2() as variant ''funcion
		return me.m_body2
 '' TODO: posible funcion (revisar)

end

public  sub 	GetNext() as variant ''funcion
		return me.m_next
 '' TODO: posible funcion (revisar)

end

public  sub 	GetUserData() as variant ''funcion
		return me.m_userData
 '' TODO: posible funcion (revisar)

	' // --------------- Internals Below -------------------
end

public  sub 	initialize(def as variant)

		' //  initialize instance variables for references
		 me.m_node1 = new b2JointNode()
		 me.m_node2 = new b2JointNode()
		' // 
		 me.m_type = def.type
		 me.m_prev = null
		 me.m_next = null
		 me.m_body1 = def.body1
		 me.m_body2 = def.body2
		 me.m_collideConnected = def.collideConnected
		 me.m_islandFlag = false
		 me.m_userData = def.userData
	' // virtual ~b2Joint() 
end

public  sub 	PrepareVelocitySolver()

end

public  sub 	SolveVelocityConstraints(step as variant) as variant ''funcion
	' //  This returns true if the position errors are within tolerance. '' TODO: posible funcion (revisar)

end

public  sub 	PreparePositionSolver()

end

public  sub 	SolvePositionConstraints()
return false '' TODO: posible funcion (revisar)

	m_type: 0
	m_prev: null
	m_next: null
Public 1: new b2JointNode(), as new 2JointNode(),
Public 2: new b2JointNode(), as new 2JointNode(),
	m_body1: null
	m_body2: null
	m_islandFlag: null
	m_collideConnected: null
	m_userData: null
	' //  ENUMS
	' //  enum b2JointType
	' //  enum b2LimitState
end

public  sub Create (def as variant, allocator as variant) as variant ''funcion
dim 		 joint  as variant = null

		switch (def.type)
		case b2Joint.e_distanceJoint:
			
				' // void* mem = allocator->Allocate(sizeof(b2DistanceJoint))
				joint = new b2DistanceJoint(def)
			
			break
		case b2Joint.e_mouseJoint:
			
				' // void* mem = allocator->Allocate(sizeof(b2MouseJoint))
				joint = new b2MouseJoint(def)
			
			break
		case b2Joint.e_prismaticJoint:
			
				' // void* mem = allocator->Allocate(sizeof(b2PrismaticJoint))
				joint = new b2PrismaticJoint(def)
			
			break
		case b2Joint.e_revoluteJoint:
			
				' // void* mem = allocator->Allocate(sizeof(b2RevoluteJoint))
				joint = new b2RevoluteJoint(def)
			
			break
		case b2Joint.e_pulleyJoint:
			
				' // void* mem = allocator->Allocate(sizeof(b2PulleyJoint))
				joint = new b2PulleyJoint(def)
			
			break
		case b2Joint.e_gearJoint:
			
				' // void* mem = allocator->Allocate(sizeof(b2GearJoint))
				joint = new b2GearJoint(def)
			
			break
		default:
			' // b2Settings.b2Assert(false)
			break
		return joint
 '' TODO: posible funcion (revisar)

end

public  sub Destroy (joint as variant, allocator as variant)

		' /* joint->~b2Joint()
		switch (joint.m_type)
		case b2Joint.e_distanceJoint:
			allocator->Free(joint, sizeof(b2DistanceJoint))
			break
		case b2Joint.e_mouseJoint:
			allocator->Free(joint, sizeof(b2MouseJoint))
			break
		case b2Joint.e_prismaticJoint:
			allocator->Free(joint, sizeof(b2PrismaticJoint))
			break
		case b2Joint.e_revoluteJoint:
			allocator->Free(joint, sizeof(b2RevoluteJoint))
			break
		case b2Joint.e_pulleyJoint:
			allocator->Free(joint, sizeof(b2PulleyJoint))
			break
		case b2Joint.e_gearJoint:
			allocator->Free(joint, sizeof(b2GearJoint))
			break
		default:
			b2Assert(false)
			break
		*/
b2Joint.e_unknownJoint = 0
b2Joint.e_revoluteJoint = 1
b2Joint.e_prismaticJoint = 2
b2Joint.e_distanceJoint = 3
b2Joint.e_pulleyJoint = 4
b2Joint.e_mouseJoint = 5
b2Joint.e_gearJoint = 6
b2Joint.e_inactiveLimit = 0
b2Joint.e_atLowerLimit = 1
b2Joint.e_atUpperLimit = 2
b2Joint.e_equalLimits = 3